
             Plethora, a massively-scalable HTTP client testing tool.

                 (c) 2006-2007 Codemass, Inc.  All rights reserved.
                 Use is subject to the license terms.

                 http://www.codemass.com/plethora/

Releases
--------

  0.2.0      - Tagged and Released on 21-Mar-2007
  0.1.0      - Renamed Tag 0.0.1
  0.0.1      - Tagged and Released on 12-Feb-2007

Release Showstoppers
--------------------

* When headers are added (or added with a blank value) they should over-
  ride (or disable) a pre-existing header value for the same header.
  - Perhaps allow multiple Cookie headers, to support this spec violation?

* Docuemnt typically usage, including how to deal with file-descriptor
  limits and other OS-limitations (eg. Mac OS X). (man page?)

* Optionally allow the client to continue trying to connect even upon
  connect failure, if there have been successful connects already. This
  will let us maintain load on a server instead of suddenly stopping the
  test.

* Fix a bug where we don't actually do non-blocking connects because we
  don't properly detect the EINPROGRESS error from connect().

Known Bugs
----------

* When the client runs out of sockets, we get an EADDRNOTAVAIL (on Solaris 10)
  which looks like "Can't assign requested address". We should either
  provide instructions for increasing system limits or we should retry
  for a short period of time until the problem resolves itself.

* Doesn't work on Mac OS X/Darwin due to bug in kqueue that doesn't handle
  non-blocking connect() calls. (Requires disabling kqueue by setting an
  environment variable that is picked up by libevent.)

* Libevent-1.1a has a devpoll bug, here's the patch to fix it:

--- devpoll.c.orig    Sat May 27 15:33:51 2006
+++ devpoll.c   Sat May 27 14:50:08 2006
@@ -140,7 +140,7 @@
 
        if (getrlimit(RLIMIT_NOFILE, &rl) == 0 &&
            rl.rlim_cur != RLIM_INFINITY)
-               nfiles = rl.rlim_cur;
+               nfiles = rl.rlim_cur - 1;
 
        /* Initialize the kernel queue */
        if ((dpfd = open("/dev/poll", O_RDWR)) == -1) {


Wishlist
--------

* Add a reasonable global timeout so that any stalled sockets will be
  terminated after X seconds (where X is something like 120).

* Resolve DNS once per request, not only once at startup, to support services
  that use round-robin DNS.

* Allow setting of buffer sizes at runtime.

* Add support for delays at various points in the request/response
  state to allow for higher concurrency testing without overloading
  the client or server CPUs or network unnecessarily.

Done
----

Release 0.1.0 (previously called 0.0.1):

* Basic functionality, multiple URLs, global timing metrics.

* Added support for various debugging output levels through the -v option.

* Added support for Solaris, tested on Solaris 10. Doesn't currently work
  on Mac OS X due to lame non-blocking connect + kqueue bug in darwin.

* Fixed a parsing bug that caused URI string corruption due to missing
  space for null characters at the end of strings.

* Improve body read draining by allowing up to 128k sized reads. With
  new TCP/IP stacks that dynamically size the socket buffers, it's
  very likely that this will be used often.

* Allow up to 8k in the receive header line, fail if larger.

* Only use one static buffer for draining the response body, instead
  of allocating for every call to process_reading_body(). This isn't
  really that much more efficient, except for maybe some cache hits
  in the kernel's read() implementation, and may be changed back
  if I start doing body-based validation later.

* Per-URL average (mean) timing metrics and printed output after running
  the test.

* Keep track of max simultaneously connected sockets.

* Per-URL min/max timing metrics and printed output.

* Global min/max timing metrics.

* Split out the parse_uri routine into its own module (for separate
  licensing).

* Added LICENSE and Copyright notices to most files in preparation
  for first distribution.

* Added build/roll.sh to automate rolling of tarballs.


Release 0.2.0:

* Fix non-blocking connect(). There was a bug that treated in-progress
  connect() attempts as being complete, which skewed the metrics and
  caused the next state to block until the connect completed.

* Improved handling of EADDRNOTAVAIL which happens when we run out of
  client ports. This support is not yet fully tested and probably
  needs more work.

* Added support at verbosity level 1 for printing the timing metrics
  (connect/read/write/close) for every request as it completes.

* Fix off-by-two error when calculating header length that would cause
  extra junk to be written to the request after the end of the headers.

* Add support for tracking the time until the first byte is received
  from the server.

* Always add the "Connection: close" header to requests, since we don't
  currently support KeepAlive requests in Plethora.


Release 0.2.1:

* Fix a bug in the location resolver that ignored the -C parameter for
  overriding the hostname from the test URL.

